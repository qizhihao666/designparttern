package com.example.createdesignmodel.prototypepattern;

/**
 * @author qzh
 * @Description: 原型模式测试类 - 原型模式的实现方式 - 克隆
 * @date 2024/1/14 8:09
 */
public class PrototypePatternTest {

    /**
     *    浅克隆： 只对原型对象创建新的对象，复制基本类型，但原型对象中的引用类型属性，与新对象中的引用类型属性，公用同一个内存地址。
     *    深克隆： 不仅对原型对象创建新的对象，复制基本类型，原型对象中引用类型属性与新对象中的引用类型属性，用不同的内存地址。
     *
     *    原型模式作用：原型模式可以提高相同类型对象的创建效率，简化创建过程。
     *    原型模式定义：使用原型实例指定待创建的对象类型，并通过复制这个原型来创建新的对象
     *    角色：
     *         抽象原型类   主要声明克隆方法，可以是接口，抽象类，甚至具体类
     *         具体原型类   实现抽象原型类中声明的克隆方法，并返回一个克隆对象
     *         客户端    通过直接实例化或工厂方法创建原型对象，并调用该对象的克隆方法，实现克隆
     *
     *     优点：
     *         提高相同类型对象的创建效率，简化创建过程。
     *         扩展性好，可以针对抽象类编程
     *
     *      缺点：
     *         每一个类都需要配置一个克隆方法，如果需要修改克隆方式，需要修改源代码，违反了开闭原则
     *         实现深克隆的方式比较复杂
     *
     *
     */


    public static void main(String[] args) {

    }
}
